logging.level.org.springframework=info
server.port=8088
management.endpoints.web.exposure.include=*
#spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.defer-datasource-initialization=true

#We see an error saying table User_Details is not found.
#So the data.sql is getting executed before our tables are created in our h2 database and we would want to delay that.
#That's why we are going to use a property spring.jpa.defer-datasource-initialization=true in application.properties
#So we would want to defer the initialization of data source and we would want to defer the execution of data.sql.

spring.jpa.show-sql=true
#This will generate sql queries being fired on console for us to see

# Configuring our own user id and password
spring.security.user.name=username
spring.security.user.password=password

#The great thing about spring security is that it would add security to all the rest API that we have created until now to the user resource to use a JPA resource.
#Everything that we have created until now. Spring security adds authentication by default.

#We need to have dependency for MySQL Connector for connecting top database with artifactId mysql-connector-java and groupId mysql
spring.datasource.url=jdbc:mysql://localhost:3306/social_media_database
spring.datasource.username=root
spring.datasource.password=

# \connect social-media-user@localhost:3306
# docker run --detach
# --env MYSQL_ROOT_PASSWORD=dummypassword
# --env MYSQL_USER=social-media-user
# --env MYSQL_PASSWORD=dummypassword
# --env MYSQL_DATABASE=social-media-database
# --name mysql
# --publish 3306:3306
# mysql:8-oracle

# When we are talking with an in-memory database like H2, Springboot Auto Configuration will directly look at the entities and create the tables.
# However, Springboot Auto Configuration will not create the tables if you are talking to a database like my SQL.
# I do want spring boot Autoconfiguration to create all the tables for us. So we will write below command for that -
spring.jpa.hibernate.ddl-auto=update
#So it would ensure that at the start of the application, based on the entities which are present, the database schema will be updated.

#And I would also want to configure the dialect to use spring.jpa.properties.hibernate.dialect.
#If we search for a class with the name MySQLDialect, we would see class called MySQLDialect in org.hibernate which is recommended for MySQL 5 and above.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#Now our application.properties is ready to talk to my SQL database.
